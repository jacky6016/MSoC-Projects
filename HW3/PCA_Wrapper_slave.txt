#ifndef PCA_WRAPPER_SLAVE_H
#define PCA_WRAPPER_SLAVE_H

#include "systemc.h"
#include "simple_bus_slave_if.h"

SC_MODULE(PCA_Wrapper_slave), simple_bus_slave_if{
	//ports
	sc_in_clk         clk;
	sc_out<bool>      LD;
	sc_out<bool>      RW;
	sc_out<unsigned>  X;
	sc_out<unsigned>  Y;
	sc_inout_rv<32>   D;

	SC_HAS_PROCESS(PCA_Wrapper_slave);

	PCA_Wrapper_slave(sc_module_name name_, unsigned int start_addr, unsigned int end_addr, unsigned int nr_wait_states) :
		sc_module(name_), m_start_addr(start_addr), m_end_addr(end_addr), m_nr_wait_states(nr_wait_states), m_wait_count(-1) {
		SC_METHOD(wait_loop);
		sensitive << clk.pos();
	};

	void wait_loop() { if (m_wait_count >= 0) m_wait_count--; }

	bool direct_read(int *data, unsigned int addr) { return true; }
	bool direct_write(int *data, unsigned int addr) { return true; }

	simple_bus_status read(int *data, unsigned int address);
	simple_bus_status write(int *data, unsigned int address);
	unsigned int start_address() const { return m_start_addr; }
	unsigned int end_address() const { return m_end_addr; }


private:
	unsigned int m_start_addr, m_end_addr;
	unsigned int m_nr_wait_states;
	int m_wait_count;
};

#endif